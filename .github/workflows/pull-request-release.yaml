name: Pull Request Validation

on:
    pull_request:
        types: [opened, synchronize, reopened, ready_for_review]
        branches:
            - release/*

concurrency:
    group: ${{ github.workflow }}-${{ github.event.pull_request.number }}
    cancel-in-progress: true

jobs:
    is-branch-up-to-date:
        name: Check if branch is up to date with Target release branch
        runs-on: ubuntu-latest
        if: github.event.pull_request.draft == false
        steps:
            - name: Git checkout
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0
            - name: Check if branch is ahead of Target release branch
              run: |
                  if ! git merge-base --is-ancestor ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }};
                  then echo "This branch is not up to date with Target release branch";
                  exit 1; fi

    detect-changes:
        name: Detect changes in pull request
        uses: ./.github/workflows/detect-pr-changes.yml
        needs: [is-branch-up-to-date]
        permissions:
            pull-requests: read
            contents: read

    code-analyze:
        name: Run Code Analyze
        uses: ./.github/workflows/code-analyze.yml
        needs: [detect-changes]
        permissions:
            pull-requests: read
            contents: read

    validate-lwc:
        name: Run LWC unit tests
        runs-on: ubuntu-latest
        needs: [code-analyze, detect-changes]
        if: ${{ needs.detect-changes.outputs.lwc-source-files == 'true' || needs.detect-changes.outputs.npm-package == 'true' || needs.detect-changes.outputs.scratch-org-config == 'true'  || needs.detect-changes.outputs.scratch-org-pr-pipeline == 'true' }}
        steps:
            - uses: actions/checkout@v4
            - uses: actions/setup-node@v4
              with:
                  node-version: 20
            - name: Setup project
              run: |
                  npm install
            - name: Run LWC tests
              run: npm run test:lwc:coverage

    validate-dev-stage:
        name: Validate on Dev-Stage
        uses: ./.github/workflows/deploy.yml
        needs: [validate-lwc, detect-changes]
        if: ${{ !(failure() || cancelled()) && (needs.detect-changes.outputs.source-files == 'true' || needs.detect-changes.outputs.replacement-files == 'true' || needs.detect-changes.outputs.project-config == 'true' || needs.detect-changes.outputs.deploy-pr-pipeline == 'true') }}
        secrets: inherit
        permissions:
            pull-requests: read
            contents: write
            deployments: write
        with:
            validate-only: true
            target-org: Dev-Stage
            concurrency-group: 'dev-stage-validation'
            deploy-type: ${{ needs.detect-changes.outputs.source-files == 'true' && 'Delta' || 'Full' }}

    validate-scratch-org:
        name: Validate on Scratch Org
        uses: ./.github/workflows/scratch-org-validation.yml
        needs: [validate-dev-stage, detect-changes]
        if: ${{ !(failure() || cancelled()) && (needs.detect-changes.outputs.source-files == 'true' || needs.detect-changes.outputs.replacement-files == 'true' || needs.detect-changes.outputs.scratch-org-config == 'true' || needs.detect-changes.outputs.scratch-org-pr-pipeline == 'true') }}
        secrets: inherit
        permissions:
            pull-requests: read
            contents: read
