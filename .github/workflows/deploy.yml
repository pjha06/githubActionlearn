name: Deploy

on:
  workflow_call:
    inputs:
      validate-only:
        type: boolean
      target-org:
        type: string
        required: true
      concurrency-group:
        type: string
        required: true
      deploy-type:
        type: string
        required: true

  workflow_dispatch:
    inputs:
      validate-only:
        type: boolean
      target-org:
        required: true
        type: choice
        options:
          - Dev-Stage
          - Dev-CPQ
          - Dev-Marketo
          - Data-Migration
          - Lever
          - QA
          - UAT
          - Production
      concurrency-group:
        required: true
        type: choice
        options:
          - dev-stage-deploy
          - dev-cpq-deploy
          - dev-marketo-deploy
          - data-migration-deploy
          - lever-deploy
          - qa-deploy
          - uat-deploy
          - prod-deploy
      deploy-type:
        required: true
        type: choice
        options:
          - Delta
          - Full

concurrency: ${{ inputs.concurrency-group }}

env:
  RELEASE_TAG_BASE: |-
    ${{
         inputs.target-org == 'Production' && 'release_production'
      || inputs.target-org == 'Dev-Stage' && 'release_dev_stage'
      || inputs.target-org == 'Dev-CPQ' && 'release_dev_cpq'
      || inputs.target-org == 'Dev-Marketo' && 'release_dev_marketo'
      || inputs.target-org == 'Data-Migration' && 'release_data_migration'
      || inputs.target-org == 'Lever' && 'release_lever'
      || inputs.target-org == 'QA' && 'release_qa'
      || inputs.target-org == 'UAT' && 'release_uat'
    }}

jobs:
  run-deploy:
    name: 'Run deployment job'
    runs-on: ubuntu-latest
    environment: |-
      ${{
         inputs.target-org == 'Production' && 'production'
      || inputs.target-org == 'Dev-Stage' && 'dev-stage'
      || inputs.target-org == 'Dev-CPQ' && 'dev-cpq'
      || inputs.target-org == 'Dev-Marketo' && 'dev-marketo'
      || inputs.target-org == 'Data-Migration' && 'data-migration'
      || inputs.target-org == 'Lever' && 'lever'
      || inputs.target-org == 'QA' && 'qa'
      || inputs.target-org == 'UAT' && 'uat'
      }}
    env:
      CI_ORG_DEPLOY: true
      APPROVAL_REPLY_SERVICE_CONTEXT_USER_USERNAME: ${{ vars.APPROVAL_REPLY_SERVICE_CONTEXT_USER_USERNAME }}
      IMPLEMENTATION_NPS_SURVEY_INTEGRATION_USER_USERNAME: ${{ vars.IMPLEMENTATION_NPS_SURVEY_INTEGRATION_USER_USERNAME }}
      IMPLEMENTATION_SELF_GUIDED_NPS_SURVEY_INTEGRATION_USER_USERNAME: ${{ vars.IMPLEMENTATION_SELF_GUIDED_NPS_SURVEY_INTEGRATION_USER_USERNAME }}
      PS_END_OF_ENGAGEMENT_SURVEY_INTEGRATION_USER_USERNAME: ${{ vars.PS_END_OF_ENGAGEMENT_SURVEY_INTEGRATION_USER_USERNAME }}
      PROFESSIONAL_SERVICES_LEVER_LESS_THAN_250_EMPLOYEE_SIZE_OWNER_ID: ${{ vars.PROFESSIONAL_SERVICES_LEVER_LESS_THAN_250_EMPLOYEE_SIZE_OWNER_ID }}
      PROFESSIONAL_SERVICES_LEVER_BETWEEN_251_1000_EMPLOYEE_SIZE_OWNER_ID: ${{ vars.PROFESSIONAL_SERVICES_LEVER_BETWEEN_251_1000_EMPLOYEE_SIZE_OWNER_ID }}
      PROFESSIONAL_SERVICES_LEVER_BETWEEN_1001_2500_EMPLOYEE_SIZE_OWNER_ID: ${{ vars.PROFESSIONAL_SERVICES_LEVER_BETWEEN_1001_2500_EMPLOYEE_SIZE_OWNER_ID }}
      PROFESSIONAL_SERVICES_LEVER_GREATER_THAN_2500_EMPLOYEE_SIZE_OWNER_ID: ${{ vars.PROFESSIONAL_SERVICES_LEVER_GREATER_THAN_2500_EMPLOYEE_SIZE_OWNER_ID }}
      IMPLEMENTATION_NPS_SURVEY_ENDPOINT_URL: ${{ secrets.IMPLEMENTATION_NPS_SURVEY_ENDPOINT_URL }}
      IMPLEMENTATION_SELF_GUIDED_NPS_SURVEY_ENDPOINT_URL: ${{ secrets.IMPLEMENTATION_SELF_GUIDED_NPS_SURVEY_ENDPOINT_URL }}
      PS_END_OF_ENGAGEMENT_SURVEY_ENDPOINT_URL: ${{ secrets.PS_END_OF_ENGAGEMENT_SURVEY_ENDPOINT_URL }}
      FORECAST_CATEGORY_MOST_LIKELY: 'MostLikely'
      SECURITY_ORG_WIDE_EMAIL_ADDRESS: ${{ vars.SECURITY_ORG_WIDE_EMAIL_ADDRESS }}
      SECURITY_EMAIL_SENDER_TYPE: 'OrgWideEmailAddress'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Setup Salesforce CLI
        run: |
          npm install --global @salesforce/cli
          sf version
      - name: Login to Org
        run: echo "${{ secrets.SFDX_AUTH_URL }}" | sf org login sfdx-url --set-default --sfdx-url-stdin
      - name: Install sfdx-git-delta
        if: inputs.deploy-type == 'Delta'
        run: echo 'y' | sf plugins install sfdx-git-delta@5.40.2
      - name: Get last release tag
        id: get-tag
        run: echo "last-tag=`git tag --sort=-committerdate -l ${{ format('{0}_*', env.RELEASE_TAG_BASE) }} | sed -n 1p`" >> "$GITHUB_OUTPUT"
      - name: Print list of stories to be deployed
        run: git log "${{ steps.get-tag.outputs.last-tag }}"..HEAD --oneline | egrep -o "EMSOC-[0-9]+" | sort | uniq
      - name: Generate delta
        if: inputs.deploy-type == 'Delta'
        run: |
          mkdir -p deltas
          sf sgd:source:delta --from "${{ steps.get-tag.outputs.last-tag }}" --to "HEAD" --output deltas --generate-delta --ignore .forceignore --ignore-destructive .destructiveignore --source force-app
          echo "# package.xml"
          cat deltas/package/package.xml; echo ""
          echo "# destructiveChanges.xml"
          cat deltas/destructiveChanges/destructiveChanges.xml; echo ""
      - name: Run deploy
        run: |
          deployFlags=(
            --wait 30
          )
          if [ "${{ inputs.deploy-type }}" = "Full" ]; then
            deployFlags+=( --source-dir force-app )
          fi
          if [ "${{ inputs.deploy-type }}" = "Delta" ]; then
            deployFlags+=( --manifest deltas/package/package.xml )
            deployFlags+=( --post-destructive-changes deltas/destructiveChanges/destructiveChanges.xml )
          fi
          if [ "${{ inputs.validate-only }}" = "true" ]; then
            deployFlags+=( --dry-run )
          fi
          if [ "${{ inputs.target-org }}" = "Dev-CPQ" ] || [ "${{ inputs.target-org }}" = "Dev-Marketo" ] || [ "${{ inputs.target-org }}" = "Data-Migration" ] || [ "${{ inputs.target-org }}" = "Lever" ]; then
            deployFlags+=( --test-level NoTestRun )
          else
            deployFlags+=( --test-level RunLocalTests )
          fi

          sf project deploy start "${deployFlags[@]}"
      - name: Cancel deploy
        if: ${{ cancelled() }}
        run: sf project deploy cancel --use-most-recent

  delete-github-deployment:
    name: 'Delete Github deployment for validation'
    runs-on: ubuntu-latest
    needs: run-deploy
    if: ${{ always() && inputs.validate-only == true }}
    permissions:
      deployments: write
    steps:
      - name: Delete previous deployment
        uses: actions/github-script@v7
        env:
          GITHUB_SHA_HEAD: ${{ github.event.pull_request.head.sha || github.sha }}
          GITHUB_HEAD_REF: ${{ github.event.pull_request.head.ref || github.ref }}
        with:
          script: |
            const { GITHUB_SHA_HEAD, GITHUB_HEAD_REF } = process.env
            const deployments = await github.rest.repos.listDeployments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: GITHUB_SHA_HEAD,
              ref: GITHUB_HEAD_REF,
              per_page: 1
            });
            console.log(deployments);
            await Promise.all(
              deployments.data.map(async (deployment) => {
                await github.rest.repos.createDeploymentStatus({ 
                  owner: context.repo.owner, 
                  repo: context.repo.repo, 
                  deployment_id: deployment.id, 
                  state: 'inactive' 
                });
                return github.rest.repos.deleteDeployment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  deployment_id: deployment.id
                });
              })
            );

  tag-deploy:
    name: 'Tag deployed commit'
    runs-on: ubuntu-latest
    needs: run-deploy
    if: inputs.validate-only != true
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Get current date
        id: date
        uses: Kaven-Universe/github-action-current-date-time@v1
        with:
          format: 'YYYY-MM-DD_HH-mm'
      - name: Tag successful deploy
        run: |
          tagValue=${{ format('{0}_{1}', env.RELEASE_TAG_BASE, steps.date.outputs.time) }}
          git tag $tagValue
          git push origin --tags
